## 基础
1. call 与 delegatecall
1.1 call与delegatecall的功能类似，区别仅在于后者仅使用给定地址的代码，其它信息则使用当前合约(如存储，余额等等)。
1.2 二者执行代码的上下文环境不同:
  当使用call调用其它合约的函数时，代码是在被调用的合约的环境里执行，
  当使用delegatecall进行函数调用时代码则是在调用函数的合约的环境里执行,通过代码测试说明
[测试代码1](https://solidity-by-example.org/delegatecall)

2. [storage、memory和calldata](https://zhuanlan.zhihu.com/p/287833109)
2.1 从0.5.0版本开始，所有的复杂类型必须显式指定其存储的数据位置，有三种可选的数据位置：memory、storage和calldata
注意：唯一可以省略数据位置声明的是状态变量，因为状态变量始终保存在账号的存储中。
2.2 storage/存储
  - 存储中的数据是永久存在的。存储是一个key/value库- 存储中的数据写入区块链，因此会修改状态，这也是存储使用成本高的原因。
  - 占用一个256位的槽需要消耗20000 gas
  - 修改一个已经使用的存储槽的值，需要消耗5000 gas
  - 当清零一个存储槽时，会返还一定数量的gas
  - 存储按256位的槽位分配，即使没有完全使用一个槽位，也需要支付其开销

2.3 memory/内存
  - 内存是一个字节数组，槽大小位256位（32字节）
  - 数据仅在函数执行期间存在，执行完毕后就被销毁
  - 读或写一个内存槽都会消耗3gas
  - 为了避免矿工的工作量过大，22个操作之后的单操作成本会上涨
  
2.4 calldata/调用数据
  - 调用数据是不可修改、非持久化的区域，用来保存函数参数，其行为类似于内存
  - 外部函数的参数必须使用calldata，但是也可用于其他变量
  - 调用数据避免了数据拷贝，并确保数据不被修改
  - 函数也可以返回使用calldata声明的数组和结果，但是不可能分配这些类型

注意:可以从remix中active debugger模块来查看

3. Sending Ether (transfer, send, call)
3.1 transfer (2300 gas, throws error) 
3.2 send (2300 gas, returns bool)
3.3 call (forward all gas or set gas, returns bool)
